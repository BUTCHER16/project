To create a database 
    create database (name of the database);

To use my database as the schema
    use (name of the database);

To drop a database 
    drop database (name of the database);

To set the database to readonly
    alter database (name of the database) read only = 1;
    we cant make any modification if it is readonly mode 

To disable read-only mode
    alter database (name of the database) read only = 0;

To create a Table
    create table name_of_the_table();

To select a Table
    select * from name_of_the_table;

To rename a table
    rename table current_name to What_name_to_change;
    
To drop a table 
    drop table table_name

To Alter the table 
    alter table table_name
    add phone_number varchar(15);

    rename column current_name to What_name_to_change; # just the title of the table in that particular column heading

To modify the content
    alter table employees
    modify column email varchar(100); to change the value for the varchar

To alter the heading of the table
    alter table employees
    modify email varchar(100)
    after Last_name;

    select *from employees

AUTO COMMIT , COMMIT , ROLLBACK

    SET AUTOCOMMIT = OFF;
    COMMIT; //TO SET SET AUTOCOMMIT OFF

    DELETE FROM INFO; // BUT I DIDNT ADD WHERE CLASS SO IT WILL DELETE ALL THE DATA
    SELECT * FROM INFO;

    //TO UNDO THE STATEMENT ENTER ROLLBACK STATEMENT
    ROLLBACK;

To insert rows 
    insert into employees
    values(5,"deepak","raj",20.25,"2021-02=23");

    select * from employees;

to insert in specific column

    insert into employees (employee_id,fname,lname)
    values(5,"deepak","raj");

    select * from employees;

To SELECT*

    select *
    from employees
    where employee_id = 1;
    //it will print the following content

to insert CURRENT_DATE & CURRENT_TIME

    CREATE TABLE test(
        my_date DATE,
        MY_TIME TIME,
        MY_DAY_TIME DATETIME
    ); //IT WILL CREATE A TABLE 

    insert into test
    VALUES(CURRENT_DATE(), CURRENT TIME(), NOW());

    SELECT * FROM test;


## unique CONSTRAINT

    CREATE TABLE PRODUCT(
        PRODUCT_ID INT,
        PRODUCT_NAME VARCHAR(25) UNIQUE, // WITH THIS KEYWORD UNIQUE WE CANT INSERT ANY PRODUCT NAME THAT ARE THE SAME THEY ALL HAVE TO BE UNIQUE
        PRICE DECIMAL(4,2)
    );
    
    IF YOU FORGET TO ADD UNIQUE TO THE TABLE 

    ALTER TABLE PRODUCT
    ADD CONSTRAINT
    UNIQUE (PRODUCT_NAME -> NAME OF THE COLUMN);

    INSERT INTO PRODUCT
    VALUES  (101,"BIRIYANI"99.99),
            (102,"THAKALI SADAM",90.90);
        
    SELECT * FROM PRODUCT  // IF WE HAVE DUPLICATE THEN IT WILL POP UO SOME ERROR


## NOT NULL CONSTRAINT //NOT NULL CONSTRAINT CAN BE ADDED TO A COLUMN WHEN YOU CREATE A TABLE WHENEVER WE ENTER A NEW ROW THE VALUE WITHIN THE COLUMN CANT BE NULL

    CREATE TABLE PRODUCT(
        PRODUCT_ID INT,
        PRODUCT_NAME VARCHAR(25),
        PRICE DECIMAL(4,2) NOT NULL //WHERE YOU DONT WANT TO BE NULL
    );

    FOR ALREADY EXISTED TAB;E 

    ALTER TABLE PRODUCT
    MODIFY PRICE DECIMAL (4, 2) NOT NULL;

##CHECK SOMETHING
    ##ADD THIS TO BOTTOM OF THE TABLE WHEN YOU CREATE A TABLE
    CONSTRAINT CHK_HOURLYPAY_PAY CHECK (HOURLY_PAY >= 10.00)

    ## FOR ALREADY EXISTING TABELE
    ALTER TABLE EMPLOYEES
    ADD CONSTRAINT CHK_HOURLYPAY_PAY CHECK (HOURLY_PAY >= 10.00);

    ## TO DROP THE CHECK
    ALTER TABLE EMPLOYEES
    DROP CHECK CHK_HOURLYPAY_PAY;

## DEFAULT CONSTRAINT

    CREATE TABLE products (
        product_id INT,
        product_name VARCHAR(25),
        price DECIMAL(4, 2) DEFAULT 0
    );

    ## FOR ALTERING THE TABLE
        ALTER TABLE PRODUCTS
        ALTER PRICE SET DEFAULT 0;

    INSERT INTO PRODUCT (PRODUCT_ID,PRODUCT_NAME)
    VALUES (5,"wATER")   

    CREATE TABLE TRANSACTION(
        TRANS_ID INT,
        TRANS_PRICE DECIMAL(5,2),
        TRANS_DATETIME DATETIME DEFAULT NOW()
    );
    INSERT INTO TRANSACTION (TRANS_ID,TRANS_PRICE)
    VALUES(1,55.54),(2,66.4);

    SELECT * FROM TRANSACTION;

##PRIMARY KEY CONSTRAINTS  //IT WILL NOT ALLOW THE USER TO ENTER ANDUPLICATE ENTRIES INTO COLUMN AND THE PRIMARYB KEY CAN BE USED ONLY FOR ONE COLUMN

    CREATE TABLE TRANSACTION (
        TRANS_ID INT PRIMARY KEY,
        TRANS_PRICE DECIMAL(5,2)
    );

    SELECT * FROM TRANSACTION

    #TO ALTER A TABLE
    ALTER TABLE TRANSACTION
    ADD CONSTRAINT primary key (TRANS_ID);
    select * from TRANSACTION;

## AUTO_INCREMENT IN PRIMARY KEYS //IT WILL AUTO INCREMENT THE VALUES OF THE ASSIGNED COLUMN
    CREATE TABLE TRANSACTION (
        TRANS_ID INT PRIMARY KEY AUTO_INCREMENT,
        TRANS_PRICE DECIMAL(5,2)
    ); 

    #TO SET AN AUTO_INCREMENT STARTING POINT
        ALTER TABLE TRANSACTION
        AUTO_INCREMENT = 1000;

## FOREIGN KEY CONSTRAINTS

    CREATE TABLE CUSTOMERS(
        CUSTOMER_ID INT PRIMARY KEY auto_increment,
        FIRST_NAME varchar(50),
        LAST_NAME varchar(50)
    );
    select * FROM CUSTOMERS;

    INSERT INTO CUSTOMERS(FIRST_NAME,LAST_NAME)
    VALUES ("ALBI","DUMBLEDORE"),("ALBERT","RAVIDOSS"),("JUSTIE","ALBERT");
    SELECT * FROM CUSTOMERS;

    CREATE TABLE TRANSACTIONS(
        TRANS_ID INT PRIMARY KEY AUTO_INCREMENT,
        AMOUNT DECIMAL (5,2),
        CUSTOMER_ID INT,
        FOREIGN(CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
    );
    SELECT * FROM TRANSACTION;

    ALTER TABLE TRANSACTIONS
    AUTO_INCREMENT = 1000;

    INSERT INTO TRANSACTIONS (AMOUNT,CUSTOMER_ID)
    values (4.99,3),(2.89,2),(3.33,3),(4.99,1);

    SELECT * FROM TRANSACTIONS;

## JOINS CONSTRAINTS // COMBNE TWO OR MORE TABLE

    INSERT INTO TRANS(AMOUNT, CUSTOMER_ID)
    VALUES(1.00,NULL);
    SELECT * FROM TRANS

    INSERT INTO customers(FIRST_NAME, LAST_NAME)
    VALUES("POPPY","PUFF");
    SELECT * FROM customers;

    #INNER JOIN
    SELECT *
    FROM TRANS INNER JOIN customers
    ON TRANS.CUSTOMER_ID = customers.CUSTOMER_ID; //NOW WE CREATED AN INNER JOIN WITH TWO TABLES

    #LEFT JOIN
    SELECT *
    FROM TRANS LEFT JOIN customers
    ON TRANS.CUSTOMER_ID = customers.CUSTOMER_ID; // IT WILL DISPLAY ALL THE ELEMENT FROM THE LEFT

    #RIGHT JOIN
    SELECT *
    FROM TRANS RIGHT JOIN customers
    ON TRANS.CUSTOMER_ID = customers.CUSTOMER_ID;// IT WILL DISPLAY ALL THE ELEMENT FROM THE RIGHT

## FUNCTIONS IN SQL
    SOME MAIN FUNCTION FOR BEGINERS
    #COUNT
    select count(amount)
    from trans;

    select count(amount) as c
    from trans;

    #MAXIMUM

    select MAX(amount) as MAXIMUN
    from trans;

    #MINIMUM
    select MIN(amount) as MINIMUN
    from trans;

    #AVERAGE
    select AVG(amount) as AVERAGE
    from trans;

    #SUM
    select SUM(amount) as SUM
    from trans;

    #CONCAT
    select CONCAT(FNAME," ",LNAME) as FULL_NAME
    from employees;

## AND OR NOT

    ALTER TABLE EMPLOYEES
    ADD COLUMN JOB VARCHAR(25) AFTER HOURLY_PAY;
    SELECT * FROM EMPLOYEES

    UPDATE employees
    SET JOB = "CEO"
    where employee_id = 1 ;

    select * FROM employees;

    SELECT * FROM EMPLOYEES
    WHERE JOB = "ITES" OR JOB = "CEO";

    SELECT * FROM EMPLOYEES
    WHERE HIRE_DAY <= "2023-03-16" AND JOB = "CEO";

    SELECT * FROM EMPLOYEES
    WHERE NOT JOB = "CEO";

    SELECT * FROM EMPLOYEES
    WHERE NOT JOB = "CEO" AND NOT JOB = "ITES";

    SELECT * FROM EMPLOYEES
    WHERE HIRE_DATE between "2021-01-23" AND "2023-01-23";

    SELECT * FROM EMPLOYEES
    WHERE JOB IN ("CEO","MANAGER");

## wild cards % and _
    select * from customers
    where first_name like "a%";

    select * from customers
    where HIRE_DATE like "2023%";

    select * from employees
    where hire_date like "__21-__-__";

    select * from employees
    where job like "_a%"

#ORDER BY
    select * from employees
    order by lname; // IT WILL PRINT IN ASCENDING ORDER
    
    select * from employees
    order by lname desc; // IT WILL PRINT IN DESCENDING ORDER

##LIMIT //
1 -- LIMIT clause is used to limit the number of records.
2 -- Useful if you' re working with a lot of data.
3 -- Can be used to display a large data on pages (pagination).


    select * from employees
    LIMIT 2;

    select * from employees
    order by FNAME LIMIT 2;

##UNION UNION combines the results of two or more SELECT statements

    SELECT fname, lname FROM employees
    UNION
    SELECT first_name, last_name FROM customers;

##self join // SELF JOIN join another copy of a table to itself used to compare rows of the same table helps to display a heirarchy of data

    ALTER TABLE customers
    ADD referral_id INT;
    SELECT * FROM customers;

    UPDATE customers
    SET referral_id = 1
    WHERE customer_id = 2;
    SELECT * FROM customers;

    select  a.customer_id , a.first_name , a.last_name,
	 concat(b.first_name ," ", b.last_name) as "referred_by"
    from customers as a
    left join customers as b
    on a.referral_id = b.CUSTOMER_ID;

    alter table employees
    add supervisor int;
    select * from employees

    update employees
    set supervisor_id = 1
    where employee_id = 5;
    select * from employees

    select  a.fname , a.lname,
		concat(b.fname, " ",b.lname) as reports_to
    from employees as a
    inner join employees as b
    on a.supervisor_id = b.employee_id;

##Views
--a virtual table based on the result-set of an SQL statement
--The fields in a view are fields from one or more real tables in the database
--They' re not real tables, but can be interacted with as if they were

    CREATE VIEW employee_attendance AS
    SELECT first_name, last_name
    FROM employees;

    SELECT * FROM employee_attendance
    ORDER BY last_name ASC;

    ALTER TABLE customers
    ADD COLUMN email VARCHAR ( (50);
    SELECT * FROM customers;

    UPDATE customers
    SET email = "ppuff@gmail.com"
    WHERE customer_id = 4;
    SELECT * FROM customers;

    CREATE VIEW customer_emails AS
    SELECT email
    FROM customers;


##INDEX (BTree data structure)
-Indexes are used to find values within a specific column more quickly
MySQL normally searches sequentially through a column
The longer the column, the more expensive the operation is
UPDATE takes more time, SELECT takes less time


    create index least_name_idx
    on customers(last_name);

    select * from customers
    where LAST_NAME = "puff";   

##subqueries

    select avg(hourly_pay) from employees;

    select fname , lname , hourly_pay ,(select avg(hourly_pay) from employees) as avg_pay
    from employees;


    select fname , lname , hourly_pay
    from employees
    where hourly_pay < (select avg(hourly_pay) from employees);

    select fname , lname , hourly_pay ,(select avg(hourly_pay) from employees) as avg_pay
    from employees; 

    select first_name , last_name
    from customers
    where customer_id in

    (select distinct customer_id
    from trans
    where CUSTOMER_ID is not null);
